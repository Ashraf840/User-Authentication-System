****************************************** Project Procedures of Creating a User Authentication System ******************************************


Youtube Video Series Ref:  https://www.youtube.com/watch?v=Y-JNrQli2C4&list=PL-lwbotZANgSbziGUCN376PGwsEKUtzeU&index=3



>>>>>>>>> Setup the Django Project using Virtual Environment

1. Create a python virtual environment in the project directory
	python3.9 -m venv env

2. Activate the python environment & check the python version (in this project, the python version is 3.9.4)
	source env/bin/activate
	python3 -V

3. If necessary, update pip after activating the virtual environment
	python3.9 -m pip install --upgrade pip

4. Install "django" package inside this python venv
	pip install django

5. Check the pyhon packages using pip, and then create a "requirements.txt" file inside the working directory
	pip list
	pip freeze > requirements.txt

6. Create a django project
	django-admin startproject custom_user

7. Move into the project's working directory. Create a app called "u_account_app" inside the working directory
	cd custom_user
	python3 manage.py startapp u_account_app


>>>>>>>>> Configure Django Project with Pycharm

8. Open this project's directory inside Pycharm & configure the python interpreter.
   Go to File > Settings > Project: User Authentication System > Python Interpreter > Click "Wrench" btn > Add... > Existing Environment > Select the python venv for the project

9. COnfigure the "Run/Debug Configuration" which is at the top right corner of IDE.
   Add new run configuration > Select "Python".
	Name: Django
	Script Path: /home/tanjim/Documents/Python/Django/Sample Project/Python Ver 3.9.5/projects/User Authentication System (Project-3)/custom_user/manage.py
	Parameters: runserver 8080
   Now click the "run" btn to start the server. And check that from the browser.


>>>>>>>>> Configure the Django Administration

10. Add a dbsqlite using "migrate" cmd, then migrate all the dhango tables into the db
	python3 manage.py migrate

11. Create a superuser for the system administration.
	python3 manage.py createsuperuser
Username: admin
Email addres: shi********
password: **********

12. Create Abstract Base User model ("MyUser") inside "models.py" of the "u_account_app".

12.1 Create a User model manager ("MyUserManager") inside the "models.py" of the "u_account_app".

12.2 Add the user authentication app ("u_account_app") in the INSTALLED_APPS[] section of the projects "settings.py" file
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
     ********************,

    'u_account_app.apps.UAccountAppConfig',
]

12.3 Add the model ("MyUser") inside the "admin.py" file of the app "u_account_app".
	admin.site.register(MyUser)

13. Error: "django.db.migrations.exceptions.InconsistentMigrationHistory...." occurs because before creating custom user model, I've executed "makemigrations" & "migrate" cmds.
    So, followed the solution-4 the ref: https://izziswift.com/django-db-migrations-exceptions-inconsistentmigrationhistory/
    Delete the _pycache_ and the 0001_initial files from the "migrations" directory of that specific app.
    Delete the db.sqlite3 from the root directory (be careful all your data will go away).
    on the terminal run:
	python manage.py makemigrations
	python manage.py migrate

14. Then, execute the following cmds
	python3 manage.py makemigrations
	python3 manage.py migrate

15. Now, create a superuser uisng the custom user model
	python3 manage.py createsuperuser
Email Address: shi************
Company Name: My Company                   
Company Phone: +88019********
Password: ***********
Password (again): ***********

16. Run the server on and check.
    NB: If having issue loggin into the administration page, delete the migrations file ("0001_initial.py"), delete the dbsqlite3 file ("db.sqlite3"),
	then, execute the step-15 again.

>>>>>>>>> Configure Git & Export to GitHub

17. Create a repo named "User-Authentication-System" in GitHub.

17.1 Initialize git in the project directory & then check the status of files in git, also check the git branch name while checking the "git status"
	cd /home/tanjim/Documents/Python/Django/"Sample Project"/"Python Ver 3.9.5"/projects/"User Authentication System (Project-3)"
	git init
	got status

17.2 Add the name of remote as "origin" & add the URL of the remote repository, which will connect the local git repo with the remote GitHub repo ("User-Authentication-System") using this url.
	git remote add origin https://github.com/Ashraf840/User-Authentication-System.git

17.3 Create a ".gitignore" file in the working directory to avoid sensitive data-file to be exported in GitHub
	touch .gitignore
	gedit .gitignore
     Copy & paste everything from the ".gitignore" file from the GitHub

17.3 Add the files to track changes in git
	git add .		# to add all the files (use ".gitignore" before using this cmd if there is any sensitive data)

17.4 Make the commit of this changes inside git
	git commit -m "Initial Commit: Push the Initial Project to the 'main' branch"

17.5 Forced push this initial commit to the "main" branch of the GitHub repository, (later, all the pushes will only be made to a GitHub branch directly everytime)
	git push -f origin main
Username for 'https://github.com': Ashraf840
Password for 'https://Ashraf840@github.com': ************


17.6 Create & switch to a new branch "dev"
	git checkout -b dev
	git add .
	git commit -m "Create a new branch 'dev'"
	git push -u origin dev
Username for 'https://github.com': Ashraf840
Password for 'https://Ashraf840@github.com': ************

>>>>>>>>> Hide Sensitive data using ".env" file

18. Hide the sensitive data from the project in GitHub

Article Ref: https://www.bing.com/videos/search?q=how+to+hide+secret_key+in+django+using+.env&docid=608040929674875935&mid=66B6F93379A78386397E66B6F93379A78386397E&view=detail&FORM=VIRE

    Create ".env" file in the working directory
	Add the SECRET_KEY in this file
    Create ".env.example" file in the working directory
	Make a descritive example for the SECRET_KEY in this file
    Install a python package "python-decouple"
	 pip install python-decouple
    Update the requirement list inside "requirements.txt" file
	pip freeze > requirements.txt
    Inside the "settings.py" file
	from decouple import config
    Now, use config() function inside the "settings.py" to hide the sensitive data to be exposed in public
    Lastly, follow the step-17.3 to step-17.6 from "Configure Git & Export to GitHub" section
	git add .
	git commit -m "Hide the sensitive data using '.env' file"
	git push -u origin dev

>>>>>>>>> Custom design of the user admin panel

19. Make a class named "MyUserAdmin" in "admin.py" file
    Uses some pre-defined fields to custom design the admin site of this model.
	list_display = ['email', 'company_name', 'phone', 'date_joined', 'last_login', 'is_admin', 'is_staff', 'is_active']
    	list_display_links = ['email', 'company_name']
    	search_fields = ['email', 'company_name', 'phone']
    	readonly_fields = ['date_joined', 'last_login']
    	list_filter = ['last_login']
    	list_per_page = 5
    	ordering = ['email']

20. Export the file to the GitHub
	git add .
	git commit -m "Custom design the user admin panel"
	git push -u origin dev

>>>>>>>>> Design a form to register users (using django-forms) -- Configure Frontend


21. Create "form.py" file in the app ("u_account_app")
    Generate the form from the custom user model ("MyUser")

22. Create a directory ("templates") inside the project's working directory.
    Add the "templates" directory inside the project's "settings.py" file's "TEMPLATES[]" section.
    Create "register.html" file inside "templates/u_account_app" directory
    Create "index.html" file inside "templates/home_app" directory

23. Create another app ("home_app") inside the project. This app is created to primarily view the home page of the project
	python3 manage.py startapp home_app
    Add this app to the "INSTALLED_APPS[]" section.
	INSTALLED_APPS[
	   **********,
	   'home_app.apps.HomeAppConfig',
	]
    Create "urls.py" file in the app ("home_app"). Route the home page ("templates/home_app/index.html") in the "urlpatterns = []" of it.
    Create url for the "home_app" inside the project's "urls.py" file.
	urlpatterns = [
	    path('admin/', admin.site.urls),
	    path('', include('home_app.urls')),
	    path('user_account/', include('u_account_app.urls')),
	]
    Add the function to display home page inside the "views.py" file of "home_app"

24. Create "urls.py" file in the app ("u_account_app"). Route the register page ("templates/u_account_app/register.html") in the "urlpatterns = []" of it.

25. Create "templates/base.html" file for templating the html files.
    Create "includes" directory to create header, footer templating files.

26. Refactor the code inside the "u_account_app/register.html", "home_app/index.html" files for proper templating.

27. Create "static" directory inside the project's working directory where the "manage.py" resides.
    Add this directory ("static") inside the project's "settings.py" file.
	STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static'), ]
    Create "static/css/home_app/index.css", "static/css/u_account_app/register.css" files for styling the html files accordingly.


28. Add all the files to git, commit those changes & lastly add them to the remote GitHub repo's ("User-Authentication-System") branch "dev"
	git add .
	git commit -m "Configure Frontend: User Reg Form & Home page"
	git push -u origin dev












